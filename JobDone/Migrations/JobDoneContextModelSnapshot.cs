// <auto-generated />
using System;
using JobDone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobDone.Migrations
{
    [DbContext(typeof(JobDoneContext))]
    partial class JobDoneContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobDone.Models.Admin.AdminModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WalletIdFk")
                        .HasColumnType("int")
                        .HasColumnName("WalletIdFK");

                    b.HasKey("Id");

                    b.HasIndex("WalletIdFk");

                    b.ToTable("AdminModel");
                });

            modelBuilder.Entity("JobDone.Models.AdminWalletModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("AdminWalletModel");
                });

            modelBuilder.Entity("JobDone.Models.Banners.BannerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("ForWho")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("BannerModel");
                });

            modelBuilder.Entity("JobDone.Models.Category.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CategoryModel");
                });

            modelBuilder.Entity("JobDone.Models.Customer.CustomerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SecurityQuestionIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SecurityQuestionIdFK");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("SecurityQuestionIdFk");

                    b.ToTable("CustomerModel");
                });

            modelBuilder.Entity("JobDone.Models.MessageModel.MessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("WhoSendMessage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId");

                    b.ToTable("MessageModel");
                });

            modelBuilder.Entity("JobDone.Models.Order.OrderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryIdKf")
                        .HasColumnType("int")
                        .HasColumnName("CategoryIdKF");

                    b.Property<int>("CustomerIdFk")
                        .HasColumnType("int")
                        .HasColumnName("CustomerIdFK");

                    b.Property<DateOnly>("DeliverDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("SellerIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SellerIdFK");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryIdKf");

                    b.HasIndex("CustomerIdFk");

                    b.HasIndex("SellerIdFk");

                    b.HasIndex(new[] { "Id" }, "IX_OrderModel");

                    b.ToTable("OrderModel");
                });

            modelBuilder.Entity("JobDone.Models.OrderByCustomer.OrderByCustomerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryIdKf")
                        .HasColumnType("int")
                        .HasColumnName("CategoryIdKF");

                    b.Property<int>("CustomerIdFk")
                        .HasColumnType("int")
                        .HasColumnName("CustomerIdFK");

                    b.Property<DateOnly>("DeliverDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CategoryIdKf");

                    b.HasIndex("CustomerIdFk");

                    b.ToTable("OrderByCustomerModel");
                });

            modelBuilder.Entity("JobDone.Models.SecurityQuestions.SecurityQuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SecurityQuestionModel");
                });

            modelBuilder.Entity("JobDone.Models.SellerAcceptRequest.SellerAcceptRequestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IsAccepted")
                        .HasColumnType("int");

                    b.Property<int>("OrderByCustomerIdFk")
                        .HasColumnType("int")
                        .HasColumnName("OrderByCustomerIdFK");

                    b.Property<int>("SellerIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SellerIdFK");

                    b.HasKey("Id");

                    b.HasIndex("OrderByCustomerIdFk");

                    b.HasIndex("SellerIdFk");

                    b.ToTable("SellerAcceptRequestModel");
                });

            modelBuilder.Entity("JobDone.Models.SellerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CategoryIdFk")
                        .HasColumnType("int")
                        .HasColumnName("CategoryIdFK");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PersonalPictureId")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("SecurityQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SecurityQuestionIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SecurityQuestionIdFK");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CategoryIdFk");

                    b.HasIndex("SecurityQuestionIdFk");

                    b.ToTable("SellerModel");
                });

            modelBuilder.Entity("JobDone.Models.SellerOldWork.SellerOldWorkModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SellerIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SellerIdFK");

                    b.HasKey("Id");

                    b.HasIndex("SellerIdFk");

                    b.ToTable("SellerOldWorkModel");
                });

            modelBuilder.Entity("JobDone.Models.ServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SellerIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SellerIdFK");

                    b.HasKey("Id");

                    b.HasIndex("SellerIdFk");

                    b.ToTable("ServiceModel");
                });

            modelBuilder.Entity("JobDone.Models.WithdrawModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountOfMoney")
                        .HasColumnType("money");

                    b.Property<int>("SellerIdFk")
                        .HasColumnType("int")
                        .HasColumnName("SellerIdFK");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SellerIdFk");

                    b.ToTable("WithdrawModel");
                });

            modelBuilder.Entity("JobDone.Models.Admin.AdminModel", b =>
                {
                    b.HasOne("JobDone.Models.AdminWalletModel", "WalletIdFkNavigation")
                        .WithMany("AdminModels")
                        .HasForeignKey("WalletIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WalletIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.Customer.CustomerModel", b =>
                {
                    b.HasOne("JobDone.Models.SecurityQuestions.SecurityQuestionModel", "SecurityQuestionIdFkNavigation")
                        .WithMany("CustomerModels")
                        .HasForeignKey("SecurityQuestionIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityQuestionIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.MessageModel.MessageModel", b =>
                {
                    b.HasOne("JobDone.Models.Customer.CustomerModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobDone.Models.SellerModel", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("JobDone.Models.Order.OrderModel", b =>
                {
                    b.HasOne("JobDone.Models.Category.CategoryModel", "CategoryIdKfNavigation")
                        .WithMany("OrderModels")
                        .HasForeignKey("CategoryIdKf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobDone.Models.Customer.CustomerModel", "CustomerIdFkNavigation")
                        .WithMany("OrderModels")
                        .HasForeignKey("CustomerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobDone.Models.SellerModel", "SellerIdFkNavigation")
                        .WithMany("OrderModels")
                        .HasForeignKey("SellerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryIdKfNavigation");

                    b.Navigation("CustomerIdFkNavigation");

                    b.Navigation("SellerIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.OrderByCustomer.OrderByCustomerModel", b =>
                {
                    b.HasOne("JobDone.Models.Category.CategoryModel", "CategoryIdKfNavigation")
                        .WithMany("OrderByCustomerModels")
                        .HasForeignKey("CategoryIdKf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobDone.Models.Customer.CustomerModel", "CustomerIdFkNavigation")
                        .WithMany("OrderByCustomerModels")
                        .HasForeignKey("CustomerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryIdKfNavigation");

                    b.Navigation("CustomerIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.SellerAcceptRequest.SellerAcceptRequestModel", b =>
                {
                    b.HasOne("JobDone.Models.OrderByCustomer.OrderByCustomerModel", "OrderByCustomerIdFkNavigation")
                        .WithMany("SellerAcceptRequestModels")
                        .HasForeignKey("OrderByCustomerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobDone.Models.SellerModel", "SellerIdFkNavigation")
                        .WithMany("SellerAcceptRequestModels")
                        .HasForeignKey("SellerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderByCustomerIdFkNavigation");

                    b.Navigation("SellerIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.SellerModel", b =>
                {
                    b.HasOne("JobDone.Models.Category.CategoryModel", "CategoryIdFkNavigation")
                        .WithMany("SellerModels")
                        .HasForeignKey("CategoryIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobDone.Models.SecurityQuestions.SecurityQuestionModel", "SecurityQuestionIdFkNavigation")
                        .WithMany("SellerModels")
                        .HasForeignKey("SecurityQuestionIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryIdFkNavigation");

                    b.Navigation("SecurityQuestionIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.SellerOldWork.SellerOldWorkModel", b =>
                {
                    b.HasOne("JobDone.Models.SellerModel", "SellerIdFkNavigation")
                        .WithMany("SellerOldWorkModels")
                        .HasForeignKey("SellerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.ServiceModel", b =>
                {
                    b.HasOne("JobDone.Models.SellerModel", "SellerIdFkNavigation")
                        .WithMany("ServiceModels")
                        .HasForeignKey("SellerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.WithdrawModel", b =>
                {
                    b.HasOne("JobDone.Models.SellerModel", "SellerIdFkNavigation")
                        .WithMany("WithdrawModels")
                        .HasForeignKey("SellerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerIdFkNavigation");
                });

            modelBuilder.Entity("JobDone.Models.AdminWalletModel", b =>
                {
                    b.Navigation("AdminModels");
                });

            modelBuilder.Entity("JobDone.Models.Category.CategoryModel", b =>
                {
                    b.Navigation("OrderByCustomerModels");

                    b.Navigation("OrderModels");

                    b.Navigation("SellerModels");
                });

            modelBuilder.Entity("JobDone.Models.Customer.CustomerModel", b =>
                {
                    b.Navigation("OrderByCustomerModels");

                    b.Navigation("OrderModels");
                });

            modelBuilder.Entity("JobDone.Models.OrderByCustomer.OrderByCustomerModel", b =>
                {
                    b.Navigation("SellerAcceptRequestModels");
                });

            modelBuilder.Entity("JobDone.Models.SecurityQuestions.SecurityQuestionModel", b =>
                {
                    b.Navigation("CustomerModels");

                    b.Navigation("SellerModels");
                });

            modelBuilder.Entity("JobDone.Models.SellerModel", b =>
                {
                    b.Navigation("OrderModels");

                    b.Navigation("SellerAcceptRequestModels");

                    b.Navigation("SellerOldWorkModels");

                    b.Navigation("ServiceModels");

                    b.Navigation("WithdrawModels");
                });
#pragma warning restore 612, 618
        }
    }
}
